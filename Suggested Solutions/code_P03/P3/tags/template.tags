================
Standing in Line
================

.. class:: center

  CSE 1325 - Fall 2019 - Homework #3 (Lab) - $doc#

  Due Tuesday, September 3 at End of Lecture

Assignment Overview
===================

We've discussed the concept of _encapsulation_, and shown how it is implemented using classes in C++ with several examples. Now it's time for you to apply that knowledge for yourself.

Full Credit
-----------

Using your Linux-based development environment, and in your GitHub-managed working directory **cse1325/P03/full_credit**, write class Line (both line.h and line.cpp) with 4 fields (private variables), a constructor, and 2 methods, as shown in the following simple UML class diagram:

$image line.uml
@startuml
skinparam classAttributeIconSize 0
hide circle

class Line {
-_x1 : double
-_y1 : double
-_x2 : double
-_y2 : double
+Line(x1 : double, y1 : double, xy : double, y2 : double)
+to_string() : string
+length() : double
}

@enduml
.. image:: line.png
    :scale: 250
    :align: center

Class Line represents a line on a 2-dimensional Cartesian coordinate system, from (x1, y1) to (x2, y2).

* The constructor should **use an initialization list** to initialize all private variables.
* Method to_string() should return a string representation of the line in the format "(x1,y1)-(x2,y2)", but using the values of the private variables, of course.
* Method length() should return the length of the line, which is the square root of (x1-x2)\ :sup:`2`\ + (y1-y2)\ :sup:`2`\ . Note: The square root function is ``double sqrt(double)``, and is found in ``<cmath>``.

You may use the following main.cpp to test your implementation. We will, too.

.. code:: C++

 #include <iostream>
 #include "line.h"

 int main() {
     Line line{1, 2, 3, 4};
     std::cout << line.to_string() << " is " 
               << line.length() << " long" << std::endl;
 }

You may use the following Makefile:

.. code:: make

 CXXFLAGS = --std=c++17

 lines: main.o line.o
	$(CXX) $(CXXFLAGS) main.o line.o -o lines

 main.o: main.cpp
	$(CXX) $(CXXFLAGS) -c main.cpp -o main.o

 line.o: line.cpp
	$(CXX) $(CXXFLAGS) -c line.cpp -o line.o

 clean:
	rm -f *.o *.gch ~* a.out lines

The expected output is

.. code:: none

  (1.000000,2.000000)-(3.000000,4.000000) is 2.82843 long


$key =====================================================================================

Full Credit
-----------

.. code:: C++

 // Filename: line.h

 #ifndef __LINE_H
 #define __LINE_H

 #include <string> 

 class Line {
   public:
     Line(double x1, double y1, double x2, double y2);
     std::string to_string();
     double length();
   private:
     double _x1, _y1, _x2, _y2;
 };

 #endif

.. code:: C++

 // Filename: line.cpp

 #include <cmath>
 #include "line.h"

 Line::Line(double x1, double y1, double x2, double y2)
    : _x1{x1}, _y1{y1}, _x2{x2}, _y2{y2} { }

 std::string Line::to_string() {
    return "(" + std::to_string(_x1) + ","
               + std::to_string(_y1) + ")-("
               + std::to_string(_x2) + ","
               + std::to_string(_y2) + ")";
 }

 double Line::length() {
    double x = _x2 - _x1;
    double y = _y2 - _y1;
    return sqrt(x*x + y*y);
 }


Rubric
~~~~~~

* Missing guard in header: -5
* #include <iostream> in header: no deduction, but note that only <string> is needed
* Includes definitions in the header: up to -10
* Data not private: -5
* Missing or extraneous class members: -5 each
* Implemented any code in a function instead of a method: up to -5 each
* Code does not compile: up to -15 depending on cause
* Fails to include, e.g., <iostream> and "line.h": up to -5
* Logic, output format, compilation, or similar issues: Up to -50 as appropriate

.. raw:: pdf

    PageBreak

$doc =====================================================================================

$ The OddPageBreak ensures the next exam starts on a new sheet of paper when printed double-sided!
.. raw:: pdf

    OddPageBreak

